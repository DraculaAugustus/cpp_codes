/*
变量的生命周期：任何变量都有确定的说明位置，决定了它在什么范围内有效（能被访问）
变量的生命周期也叫变量的作用域。
    全局变量（外部变量）函数外
        存储在静态常量区，生命周期是整个程序的运行过程，程序运行结束由系统回收
    局部变量（内部变量）函数内
        局部变量存储在栈中，生命周期就是说明变量的作用域，作用域执行结束后，由编译器回收栈中的内容
    有多个同名变量都生效时（说明在不同的作用域），优先访问小作用域的变量，
    如果要访问全局变量，变量名前加::域操作符
*/

#include <iostream>
using namespace std;
// a是全局变量，作用域是整个代码的运行周期，运行结束，变量被系统回收
int a = 100;
void fun()
{
    int a = 10;
    cout << "fun()中的局部变量a: " << a << endl; // 10
    cout << "全局变量a: " << ::a << endl;
}

int main(void)
{
    // 局部变量：作用域是整个main方法
    int a = 200;
    {
        // 代码块
        // 块内的局部变量a
        int a = 300;
        cout << "块内局部变量a: " << a << endl;
    }

    // 若多个作用域中的变量同名，并且同时有效，优先访问作用域小的变量
    // 如果想访问全局作用域中的变量，变量名前加::操作符
    cout << "全局变量a: " << ::a << endl;
    cout << "main作用域的局部变量a: " << a << endl;
    fun();
    return 0;
}